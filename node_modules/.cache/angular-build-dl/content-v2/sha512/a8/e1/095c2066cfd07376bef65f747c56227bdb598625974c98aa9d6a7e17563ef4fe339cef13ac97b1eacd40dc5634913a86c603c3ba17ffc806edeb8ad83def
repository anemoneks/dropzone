{"version":3,"sources":["webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/login/login.module.ts","webpack:///src/app/models/login.ts"],"names":["LoginComponent","modalService","route","router","formBuilder","HttpClientUserService","loginForm","group","returnUrl","queryParams","subscribe","params","trim","username","localStorage","getItem","password","controls","setValue","rememberPassword","setValidators","required","content3","open","size","get","value","remmeberPassword","valid","signIn","x","token","setItem","removeItem","window","location","href","openSm","login","selector","templateUrl","styleUrls","routes","path","data","title","urls","url","component","LoginModule","forChild","imports","declarations","Login"],"mappings":"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","file":"login-login-module-es5.js","sourcesContent":["import { Component, OnInit, AfterViewInit, ViewChild } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { HttpClientUserService } from './../services/http-client-user.service';\r\nimport { Login } from './../models/login';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { NgbModal, ModalDismissReasons, NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup = this.formBuilder.group(new Login());;;\r\n  returnUrl: string = '/';\r\n  @ViewChild('content3') content3;\r\n\r\n  f(): FormGroup {\r\n    return this.loginForm;\r\n  };\r\n\r\n  constructor(\r\n    private modalService: NgbModal,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private HttpClientUserService: HttpClientUserService) { }\r\n\r\n  ngOnInit(): void {\r\n    // Get the query params\r\n    this.route.queryParams\r\n      .subscribe(params => this.returnUrl = (params['returnUrl'] || '').trim() == '' ? '/' : '');\r\n\r\n    let username = localStorage.getItem('username') || '';\r\n    let password = localStorage.getItem('password') || '';\r\n\r\n    this.loginForm.controls.username.setValue(username);\r\n    this.loginForm.controls.password.setValue(password);\r\n    this.loginForm.controls.rememberPassword.setValue(username != '');\r\n\r\n    this.loginForm.controls.username.setValidators(Validators.required);\r\n    this.loginForm.controls.password.setValidators(Validators.required);\r\n  }\r\n\r\n  openSm(content3) {\r\n    this.modalService.open(content3, { size: 'sm' });\r\n  }\r\n\r\n  login(): void {\r\n    let username: string = (this.loginForm.get('username').value || '').trim();\r\n    let password: string = (this.loginForm.get('password').value || '').trim();\r\n    let remmeberPassword: boolean = this.loginForm.get('rememberPassword').value || false;\r\n\r\n    if (this.loginForm.valid) {\r\n\r\n      this.HttpClientUserService.signIn(username, password)\r\n        .subscribe(x => {\r\n          if ((x['success'] as boolean)) {\r\n            let token = (x['token'] as string);\r\n            localStorage.setItem('jwtToken', token);\r\n\r\n            // save password\r\n            if (remmeberPassword) {\r\n              localStorage.setItem('username', username);\r\n              localStorage.setItem('password', password);\r\n            }\r\n            else {\r\n              localStorage.removeItem('username');\r\n              localStorage.removeItem('password');\r\n            }\r\n            \r\n            this.route.queryParams.subscribe(x => window.location.href = x.returnUrl);\r\n          }\r\n          else {\r\n            this.openSm(this.content3);\r\n          }\r\n        });\r\n    }\r\n  }\r\n}\r\n","<div class=\"login-form\">\r\n    <form [formGroup]=\"loginForm\">\r\n\r\n        <h2 class=\"text-center\">Log in</h2>\r\n\r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f().controls.username?.errors?.required\">\r\n            Username must not be empty.\r\n        </div>\r\n        \r\n        <div class=\"alert alert-danger\" role=\"alert\" *ngIf=\"f().controls.password?.errors?.required\">\r\n            Password must not be empty.\r\n        </div>\r\n\r\n        <div class=\"form-group\">\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"username\" placeholder=\"Username\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <input type=\"password\" class=\"form-control\" formControlName=\"password\" placeholder=\"Password\">\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <button class=\"btn btn-primary btn-block\" (click)=\"login()\">Log in</button>\r\n        </div>\r\n        <div class=\"clearfix\">\r\n            <label class=\"float-left form-check-label\"><input type=\"checkbox\" formControlName=\"rememberPassword\"> Remember me</label>\r\n            <a href=\"#\" class=\"float-right\">Forgot Password?</a>\r\n        </div>\r\n\r\n        <ng-template #content3 let-modal>\r\n            <div class=\"modal-header\">\r\n                <h4 class=\"modal-title\">User Authentication</h4>\r\n                <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"modal.dismiss('Cross click')\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n                <p>Failed to authenticate.</p>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n                <button type=\"button\" class=\"btn btn-light\" (click)=\"modal.close('Close click')\">Close</button>\r\n            </div>\r\n        </ng-template>\r\n    </form>\r\n    <p class=\"text-center\"><a href=\"#\">Create an Account</a></p>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ChartsModule } from 'ng2-charts';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Login',\r\n      urls: [\r\n        { title: 'Login', url: '/login' },\r\n        { title: 'Login' }\r\n      ]\r\n    },\r\n    component: LoginComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [FormsModule, ReactiveFormsModule, CommonModule, RouterModule.forChild(routes), ChartsModule,],\r\n  declarations: [LoginComponent]\r\n})\r\nexport class LoginModule {\r\n\r\n}\r\n","import { ILogin } from \"../interfaces/i-login\";\r\n\r\nexport class Login implements ILogin {\r\n    constructor() {\r\n        this.username = null;\r\n        this.password = null;\r\n        this.rememberPassword = false;\r\n    }\r\n\r\n    username: string;\r\n    password: string;\r\n    rememberPassword: boolean;\r\n}\r\n"]}