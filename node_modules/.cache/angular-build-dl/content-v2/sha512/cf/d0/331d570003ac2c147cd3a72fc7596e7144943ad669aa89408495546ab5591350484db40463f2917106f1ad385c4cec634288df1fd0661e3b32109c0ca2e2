{"version":3,"sources":["webpack:///src/app/services/house.service.ts","webpack:///src/app/services/http-client-house.service.ts"],"names":["HouseService","housesUrl","cudOptions","headers","localStorage","getItem","HttpClientHouseService","http","get","pipe","handleError","url","id","house","console","log","post","_id","term","trim","options","params","set","put","error","providedIn"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { IHouse } from '../interfaces/i-house';\r\nimport { IBill } from '../interfaces/i-bill';\r\n\r\nexport abstract class HouseService {\r\n  housesUrl = '/api/houses';  // URL to web api\r\n\r\n  abstract getHouses(): Observable<IHouse[]>;\r\n  abstract getHouse(id: string): Observable<IHouse>;\r\n  abstract addHouse(house: IHouse): Observable<IHouse>;\r\n  abstract deleteHouse(house: IHouse | string): Observable<IHouse>;\r\n  abstract searchHouses(term: string): Observable<IHouse[]>;\r\n  abstract updateHouse(house: IHouse): Observable<IHouse>;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { tap, catchError, map } from 'rxjs/operators';\r\n\r\nimport { HouseService } from './house.service';\r\nimport { IHouse } from '../interfaces/i-house';\r\n\r\nconst cudOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type': 'application/json',\r\n    'Authorization': localStorage.getItem('jwtToken')\r\n  })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class HttpClientHouseService extends HouseService {\r\n\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getHouses(): Observable<IHouse[]> {\r\n    return this.http.get<IHouse[]>(this.housesUrl, cudOptions).pipe(\r\n      // tap(data => console.log(data)), // eyeball results in the console\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  getOwnerHouses(): Observable<IHouse[]> {\r\n    const url = `${this.housesUrl}/owner`;\r\n    return this.http.get<IHouse[]>(url, cudOptions).pipe(\r\n      // tap(data => console.log(data)), // eyeball results in the console\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // This get-by-id will 404 when id not found\r\n  getHouse(id: string): Observable<IHouse> {\r\n    const url = `${this.housesUrl}/${id}`;\r\n    return this.http.get<IHouse>(url, cudOptions).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  // This get-by-id does not 404; returns undefined when id not found\r\n  // getHouse<Data>(id: number): Observable<House> {\r\n  //   const url = `${this._heroesUrl}/?id=${id}`;\r\n  //   return this.http.get<House[]>(url)\r\n  //     .map(heroes => heroes[0] as House)\r\n  //     .catch(this.handleError);\r\n  // }\r\n\r\n  addHouse(house: IHouse): Observable<IHouse> {\r\n    console.log(house);\r\n    return this.http.post<IHouse>(this.housesUrl, house, cudOptions).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  deleteHouse(house: IHouse | string): Observable<IHouse> {\r\n    const _id = typeof house === 'string' ? house : house._id;\r\n    const url = `${this.housesUrl}/${_id}`;\r\n\r\n    return this.http.delete<IHouse>(url, cudOptions).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  searchHouses(term: string): Observable<IHouse[]> {\r\n    term = term.trim();\r\n    // add safe, encoded search parameter if term is present\r\n    const options = term ?\r\n      { params: new HttpParams().set('name', term) } : {};\r\n\r\n    return this.http.get<IHouse[]>(this.housesUrl, options).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  updateHouse(house: IHouse): Observable<null | IHouse> {\r\n    return this.http.put<IHouse>(this.housesUrl, house, cudOptions).pipe(\r\n      catchError(this.handleError)\r\n    );\r\n  }\r\n\r\n  private handleError(error: any) {\r\n    // In a real world app, we might send the error to remote logging infrastructure\r\n    // and reformat for house consumption\r\n    console.error(error); // log to console instead\r\n    return throwError(error);\r\n  }\r\n}\r\n"]}