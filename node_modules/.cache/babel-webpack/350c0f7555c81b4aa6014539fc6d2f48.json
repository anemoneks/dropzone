{"ast":null,"code":"/**\n * @license\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE\n */\nimport * as ɵngcc0 from '@angular/core';\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { Subject } from 'rxjs';\n\nvar DataTableDirective =\n/** @class */\n\n/*@__PURE__*/\nfunction () {\n  function DataTableDirective(el) {\n    this.el = el;\n    /**\n     * The DataTable option you pass to configure your table.\n     */\n\n    this.dtOptions = {};\n  }\n\n  DataTableDirective.prototype.ngOnInit = function () {\n    var _this = this;\n\n    if (this.dtTrigger) {\n      this.dtTrigger.subscribe(function () {\n        _this.displayTable();\n      });\n    } else {\n      this.displayTable();\n    }\n  };\n\n  DataTableDirective.prototype.ngOnDestroy = function () {\n    if (this.dtTrigger) {\n      this.dtTrigger.unsubscribe();\n    }\n\n    if (this.dt) {\n      this.dt.destroy(true);\n    }\n  };\n\n  DataTableDirective.prototype.displayTable = function () {\n    var _this = this;\n\n    this.dtInstance = new Promise(function (resolve, reject) {\n      Promise.resolve(_this.dtOptions).then(function (dtOptions) {\n        // Using setTimeout as a \"hack\" to be \"part\" of NgZone\n        setTimeout(function () {\n          _this.dt = $(_this.el.nativeElement).DataTable(dtOptions);\n          resolve(_this.dt);\n        });\n      });\n    });\n  };\n\n  DataTableDirective.ɵfac = function DataTableDirective_Factory(t) {\n    return new (t || DataTableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  DataTableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({\n    type: DataTableDirective,\n    selectors: [[\"\", \"datatable\", \"\"]],\n    inputs: {\n      dtOptions: \"dtOptions\",\n      dtTrigger: \"dtTrigger\"\n    }\n  });\n  return DataTableDirective;\n}();\n\nexport { DataTableDirective };","map":null,"metadata":{},"sourceType":"module"}