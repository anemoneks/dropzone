{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Developments/Original/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"C:/Developments/Original/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Developments/Original/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __decorate } from 'tslib';\nimport { EventEmitter, Renderer2, NgZone, ElementRef, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, forwardRef, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"selector\"];\nvar _c1 = [[[\"option\"], [\"optgroup\"]]];\nvar _c2 = [\"option, optgroup\"];\nvar NgSelect2Component_1;\n\nvar NgSelect2Component = /*@__PURE__*/function () {\n  var NgSelect2Component = NgSelect2Component_1 = /*#__PURE__*/function () {\n    // private style = `CSS`;\n    function NgSelect2Component(renderer, zone, _element) {\n      _classCallCheck(this, NgSelect2Component);\n\n      this.renderer = renderer;\n      this.zone = zone;\n      this._element = _element; // value for placeholder\n\n      this.placeholder = '';\n      this.dropdownParent = '';\n      this.allowClear = false; // enable / disable select2\n\n      this.disabled = false; // emitter when value is changed\n\n      this.valueChanged = new EventEmitter();\n      this.element = undefined;\n      this.check = false;\n\n      this.propagateChange = function (value) {};\n    }\n\n    _createClass(NgSelect2Component, [{\n      key: \"ngDoCheck\",\n      value: function ngDoCheck() {\n        if (!this.element) {\n          return;\n        }\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {// if (this.cssImport) {\n        //   const head = document.getElementsByTagName('head')[0];\n        //   const link: any = head.children[head.children.length - 1];\n        //   if (!link.version) {\n        //     const newLink = this.renderer.createElement(head, 'style');\n        //     this.renderer.setElementProperty(newLink, 'type', 'text/css');\n        //     this.renderer.setElementProperty(newLink, 'version', 'select2');\n        //     this.renderer.setElementProperty(newLink, 'innerHTML', this.style);\n        //   }\n        // }\n      }\n    }, {\n      key: \"ngOnChanges\",\n      value: function ngOnChanges(changes) {\n        if (!this.element) {\n          return;\n        }\n\n        if (changes['data'] && JSON.stringify(changes['data'].previousValue) !== JSON.stringify(changes['data'].currentValue)) {\n          this.initPlugin();\n          var newValue = this.value;\n          this.setElementValue(newValue);\n          this.valueChanged.emit(newValue);\n          this.propagateChange(newValue);\n        }\n\n        if (changes['value'] && changes['value'].previousValue !== changes['value'].currentValue) {\n          var _newValue = changes['value'].currentValue;\n          this.setElementValue(_newValue);\n          this.valueChanged.emit(_newValue);\n          this.propagateChange(_newValue);\n        }\n\n        if (changes['disabled'] && changes['disabled'].previousValue !== changes['disabled'].currentValue) {\n          this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n        }\n\n        if (changes['placeholder'] && changes['placeholder'].previousValue !== changes['placeholder'].currentValue) {\n          this.element.data('select2').$container.find('.select2-selection__placeholder').text(this.placeholder);\n        }\n\n        if (changes['dropdownParent'] && changes['dropdownParent'].previousValue !== changes['dropdownParent'].currentValue) {\n          this.renderer.setAttribute(this.selector.nativeElement, 'data-dropdownParent', this.dropdownParent);\n        }\n\n        if (changes['allowClear'] && changes['allowClear'].previousValue !== changes['allowClear'].currentValue) {\n          this.renderer.setAttribute(this.selector.nativeElement, 'data-allow-clear', this.allowClear.toString());\n        }\n      }\n    }, {\n      key: \"ngAfterViewInit\",\n      value: function ngAfterViewInit() {\n        var _this = this;\n\n        this.element = jQuery(this.selector.nativeElement);\n        this.renderer.setAttribute(this.selector.nativeElement, 'data-dropdownParent', this.dropdownParent);\n        this.renderer.setAttribute(this.selector.nativeElement, 'data-allow-clear', this.allowClear.toString()); // console.log(this.selector.nativeElement);\n\n        this.initPlugin();\n\n        if (typeof this.value !== 'undefined') {\n          this.setElementValue(this.value);\n        }\n\n        this.element.on('select2:select select2:unselect', function (e) {\n          // const newValue: string = (e.type === 'select2:unselect') ? '' : this.element.val();\n          var newValue = _this.element.val();\n\n          _this.valueChanged.emit(newValue);\n\n          _this.propagateChange(newValue);\n        });\n      }\n    }, {\n      key: \"ngOnDestroy\",\n      value: function ngOnDestroy() {\n        if (this.element) {\n          this.element.off('select2:select');\n        }\n      }\n    }, {\n      key: \"initPlugin\",\n      value: function initPlugin() {\n        var _this2 = this;\n\n        if (!this.element.select2) {\n          if (!this.check) {\n            this.check = true;\n            console.log('Please add Select2 library (js file) to the project.' + 'You can download it from https://github.com/select2/select2/tree/master/dist/js.');\n          }\n\n          return;\n        } // If select2 already initialized remove him and remove all tags inside\n\n\n        if (this.element.hasClass('select2-hidden-accessible') === true) {\n          this.element.select2('destroy');\n          this.renderer.setProperty(this.selector.nativeElement, 'innerHTML', '');\n        }\n\n        var options = {\n          data: this.data,\n          width: this.width ? this.width : 'resolve',\n          placeholder: this.placeholder\n        };\n\n        if (this.dropdownParent) {\n          options = {\n            data: this.data,\n            width: this.width ? this.width : 'resolve',\n            dropdownParent: jQuery('#' + this.dropdownParent)\n          };\n        }\n\n        Object.assign(options, this.options);\n\n        if (options.matcher) {\n          jQuery.fn.select2.amd.require(['select2/compat/matcher'], function (oldMatcher) {\n            options.matcher = oldMatcher(options.matcher);\n\n            _this2.element.select2(options);\n\n            if (typeof _this2.value !== 'undefined') {\n              _this2.setElementValue(_this2.value);\n            }\n          });\n        } else {\n          this.element.select2(options);\n        }\n\n        this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n      }\n    }, {\n      key: \"setElementValue\",\n      value: function setElementValue(newValue) {\n        // this.zone.run(() => {\n        if (Array.isArray(newValue)) {\n          var _iterator = _createForOfIteratorHelper(this.selector.nativeElement.options),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var option = _step.value;\n              this.renderer.setProperty(option, 'selected', newValue.indexOf(option.value) > -1);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        } else {\n          this.renderer.setProperty(this.selector.nativeElement, 'value', newValue);\n        }\n\n        if (this.element) {\n          this.element.trigger('change.select2');\n        } // });\n\n      }\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        if (value !== undefined) {\n          this.value = value;\n          this.setElementValue(value);\n        }\n      }\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.propagateChange = fn;\n      }\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched() {}\n    }, {\n      key: \"setDisabledState\",\n      value: function setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.renderer.setProperty(this.selector.nativeElement, 'disabled', this.disabled);\n      }\n    }]);\n\n    return NgSelect2Component;\n  }();\n\n  NgSelect2Component.ɵfac = function NgSelect2Component_Factory(t) {\n    return new (t || NgSelect2Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  NgSelect2Component.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgSelect2Component,\n    selectors: [[\"ng-select2\"]],\n    viewQuery: function NgSelect2Component_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(_c0, true);\n      }\n\n      if (rf & 2) {\n        var _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.selector = _t.first);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      dropdownParent: \"dropdownParent\",\n      allowClear: \"allowClear\",\n      disabled: \"disabled\",\n      value: \"value\",\n      data: \"data\",\n      width: \"width\",\n      options: \"options\"\n    },\n    outputs: {\n      valueChanged: \"valueChanged\"\n    },\n    features: [/*@__PURE__*/ɵngcc0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: /*@__PURE__*/forwardRef(function () {\n        return NgSelect2Component_1;\n      }),\n      multi: true\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 0,\n    consts: [[\"selector\", \"\"]],\n    template: function NgSelect2Component_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵelementStart(0, \"select\", null, 0);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return NgSelect2Component;\n}();\n\nvar NgSelect2Module = /*@__PURE__*/function () {\n  var NgSelect2Module = function NgSelect2Module() {\n    _classCallCheck(this, NgSelect2Module);\n  };\n\n  NgSelect2Module.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgSelect2Module\n  });\n  NgSelect2Module.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    factory: function NgSelect2Module_Factory(t) {\n      return new (t || NgSelect2Module)();\n    },\n    imports: [[CommonModule]]\n  });\n  return NgSelect2Module;\n}();\n/*@__PURE__*/\n\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgSelect2Module, {\n    declarations: function declarations() {\n      return [NgSelect2Component];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NgSelect2Component];\n    }\n  });\n})();\n/*\n * Public API Surface of ng-select2\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NgSelect2Component, NgSelect2Module };","map":null,"metadata":{},"sourceType":"module"}