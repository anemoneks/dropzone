{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n(function (factory) {\n  if (typeof module === \"object\" && typeof module.exports === \"object\") {\n    var v = factory(require, exports);\n    if (v !== undefined) module.exports = v;\n  } else if (typeof define === \"function\" && define.amd) {\n    define(\"@angular/compiler/src/aot/util\", [\"require\", \"exports\"], factory);\n  }\n})(function (require, exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createLoweredSymbol = exports.isLoweredSymbol = exports.stripSummaryForJitNameSuffix = exports.summaryForJitName = exports.stripSummaryForJitFileSuffix = exports.summaryForJitFileName = exports.summaryFileName = exports.normalizeGenFileSuffix = exports.splitTypescriptSuffix = exports.isGeneratedFile = exports.stripGeneratedFileSuffix = exports.ngfactoryFilePath = void 0;\n  var STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n  var GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\n  var JIT_SUMMARY_FILE = /\\.ngsummary\\./;\n  var JIT_SUMMARY_NAME = /NgSummary$/;\n\n  function ngfactoryFilePath(filePath, forceSourceFile) {\n    if (forceSourceFile === void 0) {\n      forceSourceFile = false;\n    }\n\n    var urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n    return urlWithSuffix[0] + \".ngfactory\" + normalizeGenFileSuffix(urlWithSuffix[1]);\n  }\n\n  exports.ngfactoryFilePath = ngfactoryFilePath;\n\n  function stripGeneratedFileSuffix(filePath) {\n    return filePath.replace(GENERATED_FILE, '.');\n  }\n\n  exports.stripGeneratedFileSuffix = stripGeneratedFileSuffix;\n\n  function isGeneratedFile(filePath) {\n    return GENERATED_FILE.test(filePath);\n  }\n\n  exports.isGeneratedFile = isGeneratedFile;\n\n  function splitTypescriptSuffix(path, forceSourceFile) {\n    if (forceSourceFile === void 0) {\n      forceSourceFile = false;\n    }\n\n    if (path.endsWith('.d.ts')) {\n      return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n    }\n\n    var lastDot = path.lastIndexOf('.');\n\n    if (lastDot !== -1) {\n      return [path.substring(0, lastDot), path.substring(lastDot)];\n    }\n\n    return [path, ''];\n  }\n\n  exports.splitTypescriptSuffix = splitTypescriptSuffix;\n\n  function normalizeGenFileSuffix(srcFileSuffix) {\n    return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n  }\n\n  exports.normalizeGenFileSuffix = normalizeGenFileSuffix;\n\n  function summaryFileName(fileName) {\n    var fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n    return fileNameWithoutSuffix + \".ngsummary.json\";\n  }\n\n  exports.summaryFileName = summaryFileName;\n\n  function summaryForJitFileName(fileName, forceSourceFile) {\n    if (forceSourceFile === void 0) {\n      forceSourceFile = false;\n    }\n\n    var urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n    return urlWithSuffix[0] + \".ngsummary\" + urlWithSuffix[1];\n  }\n\n  exports.summaryForJitFileName = summaryForJitFileName;\n\n  function stripSummaryForJitFileSuffix(filePath) {\n    return filePath.replace(JIT_SUMMARY_FILE, '.');\n  }\n\n  exports.stripSummaryForJitFileSuffix = stripSummaryForJitFileSuffix;\n\n  function summaryForJitName(symbolName) {\n    return symbolName + \"NgSummary\";\n  }\n\n  exports.summaryForJitName = summaryForJitName;\n\n  function stripSummaryForJitNameSuffix(symbolName) {\n    return symbolName.replace(JIT_SUMMARY_NAME, '');\n  }\n\n  exports.stripSummaryForJitNameSuffix = stripSummaryForJitNameSuffix;\n  var LOWERED_SYMBOL = /\\u0275\\d+/;\n\n  function isLoweredSymbol(name) {\n    return LOWERED_SYMBOL.test(name);\n  }\n\n  exports.isLoweredSymbol = isLoweredSymbol;\n\n  function createLoweredSymbol(id) {\n    return \"\\u0275\" + id;\n  }\n\n  exports.createLoweredSymbol = createLoweredSymbol;\n});","map":{"version":3,"sources":["../../../../../../../packages/compiler/src/aot/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\nconst GENERATED_FILE = /\\.ngfactory\\.|\\.ngsummary\\./;\nconst JIT_SUMMARY_FILE = /\\.ngsummary\\./;\nconst JIT_SUMMARY_NAME = /NgSummary$/;\n\nexport function ngfactoryFilePath(filePath: string, forceSourceFile = false): string {\n  const urlWithSuffix = splitTypescriptSuffix(filePath, forceSourceFile);\n  return `${urlWithSuffix[0]}.ngfactory${normalizeGenFileSuffix(urlWithSuffix[1])}`;\n}\n\nexport function stripGeneratedFileSuffix(filePath: string): string {\n  return filePath.replace(GENERATED_FILE, '.');\n}\n\nexport function isGeneratedFile(filePath: string): boolean {\n  return GENERATED_FILE.test(filePath);\n}\n\nexport function splitTypescriptSuffix(path: string, forceSourceFile = false): string[] {\n  if (path.endsWith('.d.ts')) {\n    return [path.slice(0, -5), forceSourceFile ? '.ts' : '.d.ts'];\n  }\n\n  const lastDot = path.lastIndexOf('.');\n\n  if (lastDot !== -1) {\n    return [path.substring(0, lastDot), path.substring(lastDot)];\n  }\n\n  return [path, ''];\n}\n\nexport function normalizeGenFileSuffix(srcFileSuffix: string): string {\n  return srcFileSuffix === '.tsx' ? '.ts' : srcFileSuffix;\n}\n\nexport function summaryFileName(fileName: string): string {\n  const fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n  return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\n\nexport function summaryForJitFileName(fileName: string, forceSourceFile = false): string {\n  const urlWithSuffix = splitTypescriptSuffix(stripGeneratedFileSuffix(fileName), forceSourceFile);\n  return `${urlWithSuffix[0]}.ngsummary${urlWithSuffix[1]}`;\n}\n\nexport function stripSummaryForJitFileSuffix(filePath: string): string {\n  return filePath.replace(JIT_SUMMARY_FILE, '.');\n}\n\nexport function summaryForJitName(symbolName: string): string {\n  return `${symbolName}NgSummary`;\n}\n\nexport function stripSummaryForJitNameSuffix(symbolName: string): string {\n  return symbolName.replace(JIT_SUMMARY_NAME, '');\n}\n\nconst LOWERED_SYMBOL = /\\u0275\\d+/;\n\nexport function isLoweredSymbol(name: string) {\n  return LOWERED_SYMBOL.test(name);\n}\n\nexport function createLoweredSymbol(id: number): string {\n  return `\\u0275${id}`;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}